# Generated by Django 4.2.8 on 2023-12-09 07:48

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


def create_dummy_data(apps, schema_editor):
    """기본적으로 존재하는 meta model 만들기"""

    # 미리 정의된 PK 값과 그룹 이름의 리스트
    predefined_data = [
        (1, "one"),
        (2, "two"),
        (3, "three"),
        (4, "four"),
    ]

    ScrapingGroup = apps.get_model("scraping", "ScrapingGroup")
    for pk, group_name in predefined_data:
        # get_or_create 메소드를 사용하여 이미 존재하는지 확인 후 새로 생성
        ScrapingGroup.objects.get_or_create(pk=pk, defaults={"group_name": group_name})


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ScrapingGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="수정일")),
                (
                    "group_name",
                    models.CharField(
                        help_text="스크래이핑될 그룹 이름입니다.",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_group_name",
                                message="그룹 이름은 영어 알파벳만 포함해야 합니다.",
                                regex="^[a-zA-Z]*$",
                            )
                        ],
                        verbose_name="그룹이름",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScrapingLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="수정일")),
                (
                    "result",
                    models.TextField(
                        blank=True,
                        help_text="스크래이핑 결과를 모두 저장하는 필드입니다.",
                        null=True,
                        verbose_name="스크래이핑 결과",
                    ),
                ),
                (
                    "is_error",
                    models.BooleanField(
                        default=False,
                        help_text="스크래이핑 결과가 정상인지 과정에 오류는 없었는지 저장하는 필드입니다.",
                        verbose_name="에러 여부",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScrapingUrl",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="수정일")),
                (
                    "website",
                    models.URLField(
                        help_text="웹사이트 URL을 입력하세요.",
                        max_length=500,
                        verbose_name="website url",
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True,
                        help_text="스크래이핑 이후 감지할 키워드 입니다. 콤마로 구분됩니다.",
                        max_length=200,
                        null=True,
                        verbose_name="감지 키워드",
                    ),
                ),
                (
                    "is_static",
                    models.BooleanField(
                        default=True,
                        help_text="정적인 HTTP 요청을 사용할지, daynamic rendering 요소까지 같이 고려할지 정하는 값입니다.",
                        verbose_name="정적인 요소 여부",
                    ),
                ),
                (
                    "last_scraping_log",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="scraping.scrapinglog",
                    ),
                ),
                (
                    "scraping_group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="scraping.ScrapingGroup",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["user", "website"], name="user_website_idx")
                ],
            },
        ),
        # migrations.RunPython(create_dummy_data),
    ]
