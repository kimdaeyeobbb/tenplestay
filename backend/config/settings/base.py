"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import nltk
import environ

# ======================================================================== #
# static config
# ======================================================================== #

# https://django-environ.readthedocs.io/en/latest/
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
DEBUG = env("DEBUG")
SECRET_KEY = env("SECRET_KEY")

# 방화벽 및 접근 권한, IP 세팅 & 설정
ALLOWED_HOSTS = ["tenplestay.kro.kr", "localhost", "127.0.0.1"]
CSRF_TRUSTED_ORIGINS = [
    "https://tenplestay.kro.kr",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]
INTERNAL_IPS = ("127.0.0.1",)


AUTH_USER_MODEL = "accounts.User"  # for get Auth user model


# Naver Clova Studio
X_NCP_CLOVASTUDIO_API_KEY = env("X_NCP_CLOVASTUDIO_API_KEY")
X_NCP_APIGW_API_KEY = env("X_NCP_APIGW_API_KEY")
X_NCP_CLOVASTUDIO_REQUEST_ID = env("X_NCP_CLOVASTUDIO_REQUEST_ID")


# ======================================================================== #
# install application, third-party config
# ======================================================================== #

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # allauth 위해
    # ============ #
    # third-party
    # ============ #
    "corsheaders",  # cors, django-cors-headers
    "debug_toolbar",  # debug (side tool bar), django-debug-toolbar
    "drf_yasg",  # swagger, drf_yasg
    "rest_framework",  # djangorestframework
    # ============ #
    # user auth & OAuth
    # ============ #
    "allauth",  # django-allauth
    "allauth.account",  # django-allauth
    "allauth.socialaccount",  # django-allauth
    "allauth.socialaccount.providers.google",  # django-allauth for google OAuth
    "allauth.socialaccount.providers.naver",  # django-allauth for naver OAuth
    "dj_rest_auth",  # dj-rest-auth
    "dj_rest_auth.registration",  # dj-rest-auth
    "rest_framework_simplejwt",  # djangorestframework-simplejwt
]

# 사이트는 1개만 사용할 것이라고 명시
SITE_ID = 1

# added django app list
APP_LIST = [
    "apps.accounts",
    "apps.scraping",
    "apps.notifications",
]
INSTALLED_APPS += APP_LIST

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # ============ #
    # third-party
    # ============ #
    "allauth.account.middleware.AccountMiddleware",  # django-allauth
    "corsheaders.middleware.CorsMiddleware",  # cors, django-cors-headers
    "debug_toolbar.middleware.DebugToolbarMiddleware",  # debug (side tool bar), django-debug-toolbar
    # ============ #
    # custom
    # ============ #
    "middleware.response.StandardizeApiResponseMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # [str(BASE_DIR.joinpath("templates"))],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "debug": DEBUG,
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# ======================================================================== #
# database config
# ======================================================================== #

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# ==================================================================== #
# DRF, JWT, Auth config
# ==================================================================== #
# https://www.django-rest-framework.org/

DEFAULT_PAGE_SIZE = 20
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    # "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.AllowAny"],
    # 카멜케이스 처리
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        # 기타 렌더러들...
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
        # 기타 파서들...
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "PAGE_SIZE": DEFAULT_PAGE_SIZE,
    "DEFAULT_PAGINATION_CLASS": "utils.paginations.CustomPagination",
    # "EXCEPTION_HANDLER": "utils.exceptions.custom_exception_handler",
}

# https://docs.djangoproject.com/en/4.2/topics/email/#email-backends
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# allauth config, https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # 커스텀한 user model엔 name field가 있다.
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_VERIFICATION = "none"  # "mandatory" - ACCOUNT_EMAIL_REQUIRED to be True.
ACCOUNT_ADAPTER = "apps.accounts.adapter.CustomAccountAdapter"
SOCIALACCOUNT_ADAPTER = "apps.accounts.adapter.CustomSocialAccountAdapter"


# dj-rest-auth config, https://dj-rest-auth.readthedocs.io/en/latest/configuration.html
REST_AUTH = {
    "TOKEN_MODEL": None,
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": False,  # refresh_token를 사용할 예정이라면, False로 설정을 바꿔야한다.
    "REGISTER_SERIALIZER": "apps.accounts.serializers.UserRegisterSerializer",
}


# simpleJWT 추가적인 JWT_AUTH 설정, https://django-rest-framework-simplejwt.readthedocs.io/en/latest/
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,  # True로 설정할 경우, refresh token을 보내면 새로운 access token과 refresh token이 반환된다.
    "BLACKLIST_AFTER_ROTATION": True,  # True로 설정될 경우, 기존에 있던 refresh token은 blacklist가된다
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# ==================================================================== #
# CORS config
# ==================================================================== #

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]


# ==================================================================== #
# Internationalization and time config
# ==================================================================== #
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"  # 언어 - 국가 설정
TIME_ZONE = "Asia/Seoul"  # 시간대
USE_TZ = True  # 장고 시간대
USE_I18N = True  # 국제화 -> Internationalization
USE_L10N = True  # 지역화 -> localization


# ==================================================================== #
# file system (static) config
# ==================================================================== #

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# ==================================================================== #
# django file size config
# ==================================================================== #

# # 단위 BYTE
# # 2.5MB - 2621440
# # 5MB - 5242880
# # 10MB - 10485760
# # 20MB - 20971520
# # 50MB - 5242880
# # 100MB 104857600
# # 250MB - 214958080
# # 500MB - 429916160
# MAX_UPLOAD_SIZE = 31457280  # 30mb 제한
# DATA_UPLOAD_MAX_MEMORY_SIZE = 31457280  # 30 mb 제한 - request body limit
# DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000  # the maximum number of parameters GET, POST

# # 2.5메가 이하의 파일의 경우 장고에서는 전체를 메모리에 올려버립니다. 다른의미로 메모리에서 읽고 디스크에 쓰는 행동이므로 상대적으로 빠릅니다.
# # 만약 파일 용량이 default값보다 클 경우 임시 디렉토리에 저장합니다.
# FILE_UPLOAD_MAX_MEMORY_SIZE = 31457280  # 30mb, 얘 보다 큰 사이즈 경우 메모리 말고 임시 디렉토리 저장


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ==================================================================== #
# others
# ==================================================================== #

# nltk 리소스 다운로드 - 자연어 처리
nltk.download("punkt")
nltk.download("stopwords")
